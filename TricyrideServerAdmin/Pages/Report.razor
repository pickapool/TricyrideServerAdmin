@page "/reports"

<PageTitle>Report | Drivers</PageTitle>

@if (IsLoading)
{
    <MudProgressCircular Class="global-loader" Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"></MudProgressCircular>
}
else
{
    <MudGrid Spacing="1" Class="pa-2">
        <MudItem xs="12">
            <MudPaper Class="d-flex flex-row align-items-center gap-4" Elevation="1" Height="auto">
                <MudGrid Class="align-items-center pa-5" Spacing="1">
                    <MudItem xs="12" sm="4" md="4" lg="2">
                        <MudChart ChartType="ChartType.Donut" Width="230px" Height="230px" @bind-SelectedIndex="Index" InputData="@data" ChartOptions="@chartOptions"></MudChart>
                    </MudItem>
                    <MudItem xs="4" sm=2 lg="2">
                        <div class="d-flex flex-column">
                            <MudBadge Origin="Origin.CenterLeft" Color="Color.Primary">
                                <MudText Class="ml-2">In Progress</MudText>
                            </MudBadge>
                            <MudText Typo="Typo.h6" Class="ml-2 mt-1">@totalInProgress.ToString("N0")</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="5" sm=2 lg="2">
                        <div class="d-flex flex-column">
                            <MudBadge Origin="Origin.CenterLeft" Color="Color.Success">
                                <MudText Class="ml-2">Canceled Bookings</MudText>
                            </MudBadge>
                            <MudText Class="ml-2 mt-1" Typo="Typo.h6">@totalCancel.ToString("N0")</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="3" sm=2 lg="2">
                        <div class="d-flex flex-column">
                            <MudBadge Origin="Origin.CenterLeft" Color="Color.Warning">
                                <MudText Class="ml-2">Completed</MudText>
                            </MudBadge>
                            <MudText Class="ml-2 mt-1" Typo="Typo.h6">@totalComplete.ToString("N0")</MudText>
                        </div>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
         <MudItem xs="12">
                <MudTable Style=" overflow: auto;height: calc(100vh - 350px);"  Items="@reportList" Hover="true" FixedFooter FixedHeader>
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Report</MudText>
                        <MudSpacer />
                        @* <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" 
                            Class="mt-0" Immediate></MudTextField> *@
                        <MudButton Disabled="@IsReportLoading" OnClick="GetReport" Variant="Variant.Text" Color="Color.Default">
                            @if (IsReportLoading)
                            {
                                <MudProgressCircular Class="mr-4" Size="Size.Small" Indeterminate="true"/>
                                <MudText>Downloading</MudText>
                            }
                            else
                            {
                                <MudIcon Class="mr-4" Icon="@Icons.Material.Filled.Download" OnClick="GetReport"></MudIcon>
                                <MudText>Download</MudText>
                            }
                        </MudButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Class="text-center">Date</MudTh>
                        <MudTh Class="text-center">Total Bookings</MudTh>
                        <MudTh Class="text-center">Active Drivers</MudTh>
                        <MudTh Class="text-center">Active Commuters</MudTh>
                        <MudTh Class="text-center">Completed</MudTh>
                        <MudTh Class="text-center">Canceled</MudTh>
                        <MudTh Class="text-center">Revenue</MudTh>
                        <MudTh Class="text-center">Summary Rating</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Class="text-center" DataLabel="Date">@context.Date?.ToString("MM/dd/yyyy")</MudTd>
                        <MudTd Class="text-center" DataLabel="Total Bookings">@context.TotalBookings</MudTd>
                        <MudTd Class="text-center" DataLabel="Active Drivers">@context.ActiveDrivers</MudTd>
                        <MudTd Class="text-center" DataLabel="Active Commuters">@context.ActiveCommuters</MudTd>
                        <MudTd Class="text-center" DataLabel="Completed">@context.CompletedRides</MudTd>
                        <MudTd Class="text-center" DataLabel="Canceled">@context.CanceledBookings</MudTd>
                        <MudTd Class='text-center pa-2' DataLabel="Revenue">â‚± @context.Revenue.ToString("N2")</MudTd>
                        <MudTd Class='text-center pa-2' DataLabel="Summary">
                            <div class="d-flex flex-row align-items-center justify-content-center">
                                <span>@context.Ratings.ToString("N2")</span>
                                <MudIcon Icon="@Icons.Material.Filled.StarOutline" Size="Size.Small"></MudIcon>
                            </div>
                            
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
           
        </MudItem>
    </MudGrid>
}
@code {
    private bool IsLoading = true, IsReportLoading = false;
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public double[] data = {};
    List<ReportModel> reportList = new();
    private double totalInProgress, totalCancel, totalComplete;
    List<CommuteModel> listcommutes = new();
    string PDF = string.Empty;
    private ChartOptions chartOptions = new ChartOptions
    {
        ShowLegend = false
    };
    protected override async Task OnInitializedAsync()
    {
        MainLayout.Title = "Reports";
        await GetDate();
        IsLoading = false;
        StateHasChanged();
    }
    private async Task GetDate()
    {
        listcommutes = await _commuteService.GetCommutes();
        totalInProgress = listcommutes.Where( c => c.CommuteStatus == Enums.Enum.CommuteStatus.InProgress).Count();
        totalCancel = listcommutes.Where( c => c.CommuteStatus == Enums.Enum.CommuteStatus.Cancelled).Count();
        totalComplete = listcommutes.Where( c => c.CommuteStatus == Enums.Enum.CommuteStatus.Done).Count();
        data = new double[3] { totalInProgress,totalCancel,totalComplete };
        reportList = listcommutes
            .GroupBy(c => c.CommuteDate.ToDateTime()?.Date)
            .Select(g => new ReportModel
                {
                    Date = g.Key,
                    TotalBookings = g.Count(),
                    ActiveDrivers = g.Select(c => c.DriverUid).Distinct().Count(),
                    ActiveCommuters = g.Select(c => c.PassengerUid).Distinct().Count(),
                    CompletedRides = g.Count(c => c.CommuteStatus == Enums.Enum.CommuteStatus.Done),
                    CanceledBookings = g.Count(c => c.CommuteStatus == Enums.Enum.CommuteStatus.Cancelled),
                    Revenue = g.Sum(c => c.Fare),
                    Ratings = g.Any() ? (float)g.Average(c => c.Rating) : 0
                })
            .OrderBy(report => report.Date) // Sort by Date in ascending order
            .ToList();
    }
    private async Task GetReport()
    {
        IsReportLoading = true;
        StateHasChanged();
        await Task.Delay(1500);
        IActionResult report = _reportService.GetReport(reportList);
        if (report is FileContentResult fileContentResult)
        {
            byte[] pdfBytes = fileContentResult.FileContents;
            PDF = "data:application/pdf;base64," + Convert.ToBase64String(pdfBytes);
            await _jsRuntime.InvokeVoidAsync("downloadFile", PDF, "report.pdf");
            IsReportLoading = false;
            StateHasChanged();
        }
    }
}