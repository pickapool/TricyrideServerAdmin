@page "/drivers"
<PageTitle>Drivers</PageTitle>
@if (IsLoading)
{
    <MudProgressCircular Class="global-loader" Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"></MudProgressCircular>
}
else
{
    <MudGrid Spacing="2" Class="pa-3">
        <MudItem xs="12" sm="12" md="8" xl="8">
            <MudPaper Elevation="0" Height="auto">
                <Chart Config="lineChart" Height="100"></Chart>
            </MudPaper>
        </MudItem>
        <MudItem Class="d-flex align-items-stretch" xs="12" sm="12" md="4" xl="4">
            <MudPaper Class="pa-6 d-flex flex-column justify-space-between gap-4" Elevation="1" Width="100%">
                <MudText Typo="Typo.h6">Summary</MudText>
                <div>
                    <MudText Typo="Typo.subtitle1">Pendings</MudText>
                    <div class="d-flex flex-row gap-2 align-items-center">
                        @foreach (var progressBar in progressBarsPending)
                        {
                            <MudProgressLinear style="width: 100px;" Color="@progressBar.Color" Rounded="true" Size="Size.Large" Value="@progressBar.Value"/>
                        }
                        <MudText Typo="Typo.subtitle1">@(percent1.ToString("N2")+"%")</MudText>
                    </div>
                </div>
                <div>
                    <MudText Typo="Typo.subtitle1">Rejected</MudText>
                    <div class="d-flex flex-row gap-2 align-items-center">
                        @foreach (var progressBar in progressBarsRejected)
                        {
                            <MudProgressLinear style="width: 100px;" Color="@progressBar.Color" Rounded="true" Size="Size.Large" Value="@progressBar.Value"/>
                        }
                        <MudText Typo="Typo.subtitle1">@(percent2.ToString("N2")+"%")</MudText>
                    </div>
                </div>
                <div>
                    <MudText Typo="Typo.subtitle1">Approved</MudText>
                    <div class="d-flex flex-row gap-2 align-items-center">
                        @foreach (var progressBar in progressBarsApproved)
                        {
                            <MudProgressLinear style="width: 100px;" Color="@progressBar.Color" Rounded="true" Size="Size.Large" Value="@progressBar.Value"/>
                        }
                        <MudText Typo="Typo.subtitle1">@(percent3.ToString("N2")+"%")</MudText>
                    </div>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudTable Style=" overflow: auto;" Height="auto" Items="@listAccounts" Hover="true" Filter="new Func<UserAccountModel,bool>(FilterFunc)" FixedFooter FixedHeader>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Drivers List</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" 
                        Class="mt-0" Immediate></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Class="text-center">UID</MudTh>
                    <MudTh>Driver</MudTh>
                    <MudTh>Username</MudTh>
                    <MudTh Class="text-center">Address</MudTh>
                    <MudTh Class="text-center">Contact #</MudTh>
                    <MudTh Class="text-center">Status</MudTh>
                    <MudTh Class="text-center">Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="UID">@context.Uid</MudTd>
                    <MudTd DataLabel="Driver">
                        <div class="d-flex flex-row align-items-center gap-2">
                            <MudAvatar>
                                <MudImage Src="@(context.ProfilePicture == null || String.IsNullOrEmpty(context.ProfilePicture) ? "images/blank_profile.png" : context.ProfilePicture)"></MudImage>
                            </MudAvatar>
                            <div class="d-flex flex-column">
                                <MudText Typo="Typo.button">@(context.ProfilePicture == null ? "Not Occupied" : context.GetFullName())</MudText>
                                <MudText Typo="Typo.caption">@(context.ProfilePicture == null ? "" : context.Email)</MudText>
                            </div>
                            
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Date">@context.Username</MudTd>
                    <MudTd DataLabel="Fare">@context.Address</MudTd>
                    <MudTd Class="text-center" DataLabel="Fare">@context.PhoneNumber</MudTd>
                    <MudTd Class="text-center" DataLabel="Status">
                        @if(context.IsApproved == null)
                        {
                            <MudChip T="string" Color="Color.Warning" Size="Size.Small">Pending</MudChip>
                        } else if(context.IsApproved == true) {
                            <MudChip T="string" Color="Color.Success" Size="Size.Small">Approved</MudChip>
                        } else {
                            <MudChip T="string" Color="Color.Error" Size="Size.Small">Rejected</MudChip>
                        }
                    </MudTd>
                    <MudTd Class='text-center pa-2' DataLabel="Action">
                        <MudMenu Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft'
                            TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                                <MudMenuItem OnClick="()=> ViewUserDialog(context)">
                                    <div class='d-flex align-center gap-2 '>
                                        <MudIcon Icon='@Icons.Material.Filled.Preview' Size='Size.Small' />
                                        <MudText Typo='Typo.body2'>View</MudText>
                                    </div>
                                </MudMenuItem>
                                <MudMenuItem OnClick="()=> OpenConfirmDialog(Enums.Enum.Action.Approve, context)">
                                    <div class='d-flex align-center gap-2 '>
                                        <MudIcon Icon='@Icons.Material.Filled.Check' Size='Size.Small' />
                                        <MudText Typo='Typo.body2'>Approve</MudText>
                                    </div>
                                </MudMenuItem>
                                <MudMenuItem OnClick="()=> OpenConfirmDialog(Enums.Enum.Action.Reject, context)">
                                    <div class='d-flex align-center gap-2 '>
                                        <MudIcon Icon='@Icons.Material.Filled.Cancel' Size='Size.Small' />
                                        <MudText Typo='Typo.body2'>Reject</MudText>
                                    </div>
                                </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
}
@code {
    List<UserAccountModel> listAccounts = new();
    private string searchString = "";
    private bool IsLoading = true;
    private LineConfig lineChart;
    float percent1 = 0.0f, percent2 = 0.0f, percent3 = 0.0f;
    private List<ProgressBarModel> progressBarsPending;
    private List<ProgressBarModel> progressBarsApproved;
    private List<ProgressBarModel> progressBarsRejected;
    protected override async Task OnInitializedAsync()
    {
        MainLayout.Title = "Drivers";
        await GetList();
        IsLoading = false;
        StateHasChanged();
    }
    private async Task GetList()
    {
        listAccounts = await _accountService.GetUsers();
        listAccounts = listAccounts.Where( e => e.AccountType == Enums.Enum.AccountType.Driver).ToList();
        foreach(var e in listAccounts) {
            var userRecord = await FirebaseAuth.DefaultInstance.GetUserAsync(e.Uid);
            e.CreationDate =  userRecord.UserMetaData.CreationTimestamp;
        }
        SetupGraph();
    }
    private bool FilterFunc(UserAccountModel element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Username.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.GetFullName().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private async Task OpenConfirmDialog(Enums.Enum.Action action, UserAccountModel user)
    {
     
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.ContentText, "Do you really want to "+ action.ToString().ToLower() +" these record?" },
            { x => x.ButtonText, "Yes, " + action.ToString() },
            { x => x.Color, action == Enums.Enum.Action.Approve ? Color.Success : Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, CloseOnEscapeKey = false, BackdropClick = false };

        var dialog = await _dialogService.ShowAsync<ConfirmDialog>(action.ToString(), parameters, options);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Canceled)
        {
            try {
                user.IsApproved = action == Enums.Enum.Action.Approve ? true : false;
                await _accountService.UpdateUser(user);
                Extensions.ShowSnackbar($"Account was successfully {(action == Enums.Enum.Action.Approve ? "Approved":"Rejected")}.", Variant.Filled, _snackBar, Severity.Success);
            } catch(Exception ee) {
                Console.WriteLine(ee.Message);
                Extensions.ShowSnackbar("Sorry there was a problem updating the account.", Variant.Filled, _snackBar, Severity.Error);
            } 
        }
    }
    private async Task ViewUserDialog(UserAccountModel user){
        var parameters = new DialogParameters<ViewUserDialog>
        {
            { x => x.UserAccount, user }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, CloseOnEscapeKey = false, BackdropClick = false };

        var dialog = await _dialogService.ShowAsync<ViewUserDialog>("View account", parameters, options);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Canceled)
        {
            
        }
    }
    private void SetupGraph()
    {
        lineChart = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Drivers Graph"
                },
                Scales = new Scales
                {
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Count",
                                Display = true
                            }, 
                            Ticks = new LinearCartesianTicks {
                                Max = listAccounts.Count()/2
                            }
                        }
                    }
                }
            }
        };

        List<int> listPendings = new();
        List<int> listRejected = new();
        List<int> listApproved = new();
        List<int> listDrivers = new();
        for(int  i = 1 ; i <= 12; i++)
        {
            int drivers = listAccounts.Where( e => e.CreationDate?.Year == DateTime.Now.Year && e.CreationDate?.Month == i).Count();
            int rejecteds = listAccounts.Where( e => e.CreationDate?.Year == DateTime.Now.Year && e.CreationDate?.Month == i && e.IsApproved != null && e.IsApproved == false).Count();
            int pendings = listAccounts.Where( e => e.CreationDate?.Year == DateTime.Now.Year && e.CreationDate?.Month == i && e.IsApproved == null).Count();
            int approved = listAccounts.Where( e => e.CreationDate?.Year == DateTime.Now.Year && e.CreationDate?.Month == i && e.IsApproved != null && e.IsApproved == true).Count();

            listDrivers.Add(drivers);
            listPendings.Add(pendings);
            listRejected.Add(rejecteds);
            listApproved.Add(approved);
        }
        

        foreach (string months in new[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" })
        {
            lineChart.Data.Labels.Add(months);
        }

        LineDataset<int> pendingDataset = new LineDataset<int>(listPendings.ToArray())
        {
            Label = "Pending",
            BackgroundColor = "rgba(0, 0, 0, 0)",
            BorderColor = ColorUtil.ColorHexString(255, 206, 86),
            BorderWidth = 3,
        };
        LineDataset<int> approvedDataset = new LineDataset<int>(listApproved.ToArray())
        {
            Label = "Approved",
            BackgroundColor = "rgba(0, 0, 0, 0)",
            BorderColor = ColorUtil.ColorHexString(75, 192, 192),
            BorderWidth = 3,
        };
        LineDataset<int> rejectedDataset = new LineDataset<int>(listRejected.ToArray())
        {
            Label = "Rejected",
            BackgroundColor = "rgba(0, 0, 0, 0)",
            BorderColor = ColorUtil.ColorHexString(255, 99, 132),
            BorderWidth = 3,
        };
        BarDataset<int> barDataset = new BarDataset<int>(listDrivers.ToArray())
        {
            Label = "Drivers",
            BackgroundColor = "rgba(54, 162, 235, 1)",
            BorderColor = "rgba(54, 162, 235, 1)",
            BorderWidth = 4,
        };

        lineChart.Data.Datasets.Add(pendingDataset);
        lineChart.Data.Datasets.Add(approvedDataset);
        lineChart.Data.Datasets.Add(rejectedDataset);
        
        lineChart.Data.Datasets.Add(barDataset);

        //progressbar
        progressBarsPending = new List<ProgressBarModel>();
        progressBarsApproved = new List<ProgressBarModel>();
        progressBarsRejected = new List<ProgressBarModel>();

        float totalCount = listAccounts.Count();
        float countPendings = listAccounts.Count(e => e.CreationDate?.Year == DateTime.Now.Year && e.IsApproved == null);
        float countRejected = listAccounts.Count(e => e.CreationDate?.Year == DateTime.Now.Year && e.IsApproved != null && e.IsApproved == false);
        float countApproved = listAccounts.Count(e => e.CreationDate?.Year == DateTime.Now.Year && e.IsApproved != null && e.IsApproved == true);

        float percentagePerBar = 100 / 5; // Assuming 5 progress bars
        CalculateProgressBars(countPendings, progressBarsPending, percentagePerBar, totalCount, Color.Warning);
        CalculateProgressBars(countApproved, progressBarsApproved, percentagePerBar, totalCount, Color.Success);
        CalculateProgressBars(countRejected, progressBarsRejected, percentagePerBar, totalCount, Color.Error);

        percent1 = (totalCount > 0) ? (countPendings / totalCount) * 100 : 0;
        percent2 = (totalCount > 0) ? (countRejected / totalCount) * 100 : 0;
        percent3 = (totalCount > 0) ? (countApproved / totalCount) * 100 : 0;
        
    }
    void CalculateProgressBars(float count, List<ProgressBarModel> progressBars, float percentagePerBar,float totalCount, Color color)
    {
        float percentage = (count / totalCount) * 100;
        
        for (int i = 0; i < 5; i++)
        {
            int value;
            if (percentage >= (i + 1) * percentagePerBar)
            {
                value = 100; // Full bar
            }
            else if (percentage >= i * percentagePerBar)
            {
                value = (int)((percentage - (i * percentagePerBar)) / percentagePerBar * 100);
            }
            else
            {
                value = 0; // Empty bar
            }

            progressBars.Add(new ProgressBarModel
            {
                Value = value,
                Color = color
            });
        }
        
    }

}