<Preloader>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <CascadingAuthenticationState>
                <AuthorizeView>
                    <Authorized>
                        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                    </Authorized>
                    <NotAuthorized>
                        <LayoutView Layout="@typeof(MainLayout)">
                            <MudItem xs="10" sm="4" md="4">
                                <div class="page d-flex justify-content-center align-items-center py-4" style="height: 90vh;width: 100%;">
                                    <MudPaper Class="d-flex flex-column pa-4 pt-5 gap-3" Elevation="3" Width="100%" Height="auto">
                                        <MudText Class="mb-6" Typo="Typo.h6">Welcome, Sign in to continue.</MudText>
                                        <MudTextField @bind-Value="email" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.LockPerson"/>
                                        <MudTextField @bind-Value="password" InputType="PasswordInput" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense" 
                                        Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password"/>
                                        <MudButton Class="mb-5" Variant="Variant.Filled" OnClick="Login" Color="Color.Primary">SIGN IN</MudButton>
                                    </MudPaper>
                                </div>
                            </MudItem>
                        </LayoutView>
                    </NotAuthorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</Preloader>
@code
{
    private string email, password;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    private async Task Login()
    {
        try
        {
            if(!email.Equals("superadmin@gmail.com"))
            {
                Extensions.ShowSnackbar("Sorry we can't find your account.", Variant.Filled, _snackBar, Severity.Error);
                return;
            }
            Task<UserAccountResponse> item = _accountService.SignInWithEmailAndPassword(email, password);
            await item;
            if (item.Status == TaskStatus.RanToCompletion)
            {
                if (item.Result != null)
                {
                    DateTime expirationTime = DateTime.UtcNow.AddSeconds(int.Parse(item.Result.ExpiresIn));
                    TokenModel tokenModel = new();
                    tokenModel.Token = item.Result.IdToken;
                    tokenModel.ExpiresAt = expirationTime;
                    await _localStorage.SetItemAsync("token", tokenModel);
                    ((CustomAuthStateProvider)_authenticationStateProvider).NotifyUserAuthentication(item.Result.IdToken);
                }
                else
                {
                    Extensions.ShowSnackbar("Invalid email or passowrd", Variant.Filled, _snackBar, Severity.Error);
                }
            }
        }
        catch (Exception ee)
        {
            Extensions.ShowSnackbar("Invalid email or passowrd", Variant.Filled, _snackBar, Severity.Error);
        }
    }
}