@if(isChecked)
{
    @ChildContent
} else {
    <MudProgressCircular Class="global-loader" Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"></MudProgressCircular>
}

@code {

    [Parameter] public RenderFragment? ChildContent { get; set; }
    private bool isChecked = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            ValueTask<TokenModel> getToken = _localStorage.GetItemAsync<TokenModel>("token");
            await getToken;
            if(getToken.IsCompletedSuccessfully)
            {
                if(getToken.Result == null)
                {
                    isChecked = true;
                    StateHasChanged();
                    return;
                }
                if(Extensions.IsTokenExpired(_localStorage, getToken.Result))
                {
                     await _localStorage.RemoveItemAsync("token");
                    ((CustomAuthStateProvider)_authenticationStateProvider).NotifyUserLogout();
                } else {
                    ((CustomAuthStateProvider)_authenticationStateProvider).NotifyUserAuthentication(getToken.Result.Token);
                }
                isChecked = true;
                StateHasChanged();
            }
        }
    }
}