@inherits LayoutComponentBase

<PageTitle>TricyrideServerAdmin</PageTitle>
<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
    <MudLayout>
        <MudAppBar Elevation="1">
            <CascadingAuthenticationState>
                <AuthorizeView>
                    <Authorized>
                        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                        <MudSpacer />
                        @email
                        <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="Logout"/>
                    </Authorized>
                    <NotAuthorized>
                        <MudAvatar Class="mr-2">
                            <MudImage Src="images/logo.jpg" Alt="logo" Size="Size.Large"></MudImage>
                        </MudAvatar>
                        <MudText Typo="Typo.h6">Tricyride</MudText>
                    </NotAuthorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
        </MudAppBar>
        <MudDrawer @bind-Open="@_open" Elevation="1">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Tricyride</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match="NavLinkMatch.All">Dashboard</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All">Library</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudMainContent Class="main-content">
            @Body
        </MudMainContent>
    </MudLayout>
</div>
@code {
    private bool _open = false;
    private string email = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            email = claimsPrincipal.FindFirst(ClaimTypes.Email)?.Value;
            StateHasChanged();
        }
    }
    private void ToggleDrawer()
    {
        _open = !_open;
    }
    public async Task Logout()
    {
        await _localStorage.RemoveItemAsync("token");
        ((CustomAuthStateProvider)_authenticationStateProvider).NotifyUserLogout();
        _navigation.NavigateTo("/");
    }   

}
<style>
    .main-content {
        display : flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
    }
</style>